# -*- coding: UTF-8 -*-

# ================================================================
#   Copyright (C) 2019 OmniSci. All rights reserved.
#
#   Title：translate.py
#   Author：Yong Bai
#   Time：2019-04-09 22:43:21
#   Description：
#
# ================================================================

from translate import Translate
import json as js
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--thread', default='0')
opts = parser.parse_args()

# 调API太慢了，分三个线程跑

if opts.thread == '0':
    data = {
        '动物': ["虎", "狼", "鼠", "鹿", "貂", "猴", "貘", "树懒",
               "斑马", "狗", "狐", "熊", "象", "豹子", "麝牛", "狮子",
               "小熊猫", "疣猪", "羚羊", "驯鹿", "考拉", "犀牛", "猞猁", "穿山甲",
               "长颈鹿", "熊猫", "食蚁兽", "猩猩", "海牛", "水獭", "灵猫", "海豚",
               "海象", "鸭嘴兽", "刺猬", "北极狐", "无尾熊", "北极熊", "袋鼠", "犰狳",
               "河马", "海豹", "鲸鱼", "鼬" ],
    }
elif opts.thread == '1':
    data = {
        '水果': ["西瓜", "美人瓜", "黄河蜜", "哈密瓜", "木瓜", "草莓", "蓝莓",
               "黑莓", "桑葚", "覆盆子", "葡萄", "青提", "红提", "马奶子", "蜜桔", "砂糖橘",
               "金橘", "脐橙", "柚子", "葡萄柚", "柠檬", "文旦柚", "莱姆", "桃"
            , "蟠桃", "水蜜桃", "黄桃", "李子", "樱桃", "杏子", "梅子", "杨梅", "西梅", "乌梅"
            , "橄榄", "荔枝", "龙眼", "苹果"
            , "梨", "蛇果", "海棠果"
            , "沙果", "柿子", "山竹", "黑布林", "枇杷", "杨桃", "山楂", "圣女果", "无花果"
            , "罗汉果", "火龙果", "猕猴桃", "菠萝", "芒果", "椰子", "奇异果"
            , "芭乐", "榴莲", "香蕉", "甘蔗", "石榴"],
    }
else:
    data = {
        '植物': ["珊瑚树", "银杏", "栎类", "臭椿", "木荷", "冬青", "悬铃木", "女贞",
               "大叶黄扬", "落叶松", "黑荆树", "马尾松", "思茅松，云南松",
               "南亚松", "油松", "红松", "黑胡桃", "柠檬", "悬铃木", "蒲桃",
               "珙桐", "木棉", "爪哇木棉", "洋紫荆", "羊蹄甲", "雨树", "合欢",
               "龙牙花", "刺桐", "广玉兰", "苏铁", "紫薇", "桧柏", "白皮松",
               "杉木", "侧柏", "臭椿", "樟树", "雪松", "银桦", "柞树", "稠李",
               "椴树", "冷杉", "银桦", "滇杨", "拐枣", "油茶", "蓝按", "桑树",
               "垂柳", "刺槐", "银桦"]
    }

translateHelper = Translate()

output = {}

for domain, items in data.items():
    output[domain] = {}
    for item in items:
        status, enName = translateHelper.connect(item)
        if status:
            output[domain][item] = enName[0]
            print('{}\t{}'.format(item, enName[0]))

with open('data_{}.json'.format(opts.thread), 'w') as f:
    js.dump(output, f, indent=4)
